%====================== Initializing pose graph ==========================%
init.poseMean = zeros(3,1);
if strcmp(init.pose,'sesync_dataset')

    init.dataset = 'parking-garage';
    init.data_dir = [sesync_path,'/data/'];
    init.data_dir = strcat(init.data_dir, init.dataset, '.g2o');
    measurements = load_g2o_data(init.data_dir);
    s.n = max(max(measurements.edges));
    s.m = size(measurements.edges,1);
    % initialize rob data structure
    s.d = length(measurements.t{1});
    s.bound = 0; % desired boundaries of the environment
    s.gt_bool = false; % is ground truth available?
    init.rComm = 1.0; % desired communication radius
%     rob = initRobDataStructure(s);
    rob(s.n) = struct();
% robot world frame initialization
for i = 1:s.n
    % ground truth only for certain datasets
    if ( s.gt_bool )
        rob(i).t = zeros(s.d,1);     % world position
        rob(i).R = zeros(s.d,s.d,1); % row vector or rotation matrices
    end
    % measurements
    rob(i).y_t = zeros(s.d,s.n,1);     % measurements
    rob(i).y_R = zeros(s.d,s.d*s.n,1); % measurements
    % centralized estimates
    rob(i).t_hat = zeros(s.d,1);     % translation
    rob(i).R_hat = zeros(s.d,s.d,1); % rotation
end



%======================= Circle formation ================================%
elseif strcmp(init.pose,'circle')
    % initialize rob data structure
    s.d = 3; % dimension of the problem
    s.n = 25; % number of robots
    s.bound = 5; % desired boundaries of the environment
    s.gt_bool = true; % is ground truth available?
    init.rComm = 4.0; % desired communication radius
    init.radius = 2.6;
    alpha = 2*pi/s.n;
%     rob = initRobDataStructure(s);
    rob(s.n) = struct();
% robot world frame initialization
for i = 1:s.n
    % ground truth only for certain datasets
    if ( s.gt_bool )
        rob(i).t = zeros(s.d,1);     % world position
        rob(i).R = zeros(s.d,s.d,1); % row vector or rotation matrices
    end
    % measurements
    rob(i).y_t = zeros(s.d,s.n,1);     % measurements
    rob(i).y_R = zeros(s.d,s.d*s.n,1); % measurements
    % centralized estimates
    rob(i).t_hat = zeros(s.d,1);     % translation
    rob(i).R_hat = zeros(s.d,s.d,1); % rotation
end
    
    
    x=zeros(3,3,27);
    for i = 1:s.n
        % generated poses
        Rad = euler2rot([0;0;(i-1)*alpha]);
        rob(i).t(:,tInd) = Rad*init.radius*[1;0;0];
        rob(i).R(:,:,tInd) = randRot(s.d);
        x(:,:,i)=rob(i).R;
        % count mean position
        init.poseMean = init.poseMean + rob(i).t(:,tInd); % mean position
    end

%======================= Grid formation ================================%
elseif strcmp(init.pose,'grid')
    % initialize rob data structure
    s.d = 3; % dimension of the problem
    init.numRobotsPerSide = 3; % number of robots per side
    s.n = (init.numRobotsPerSide)^s.d; % number of robots
    s.gt_bool = true; % is ground truth available?
    init.rComm = 1.66; % desired communication radius
    s.bound = init.rComm*init.numRobotsPerSide*1.2; % desired boundaries of the environment
    init.side = round((s.n)^(1/3));
    init.sqSize = init.rComm*init.side/1;
%     rob = initRobDataStructure(s);
    rob(s.n) = struct();
% robot world frame initialization
for i = 1:s.n
    % ground truth only for certain datasets
    if ( s.gt_bool )
        rob(i).t = zeros(s.d,1);     % world position
        rob(i).R = zeros(s.d,s.d,1); % row vector or rotation matrices
    end
    % measurements
    rob(i).y_t = zeros(s.d,s.n,1);     % measurements
    rob(i).y_R = zeros(s.d,s.d*s.n,1); % measurements
    % centralized estimates
    rob(i).t_hat = zeros(s.d,1);     % translation
    rob(i).R_hat = zeros(s.d,s.d,1); % rotation
end
    x=zeros(3,3,27);
    for i = 1:init.side
        for ii = 1:init.side
            for iii = 1:init.side
                % position
                ind = (init.side*init.side*(i-1) + init.side*(ii-1) + iii);
                rob(ind).t(:,tInd) = [init.sqSize/init.side*i,...
                    init.sqSize/init.side*ii,...
                    init.sqSize/init.side*iii];
                % rotation
                rob(ind).R(:,:,tInd) = randRot(s.d);
                x(:,:,ind)=rob(ind).R;
%                 for i=1:27
%                      x(i,:,:)=rob(in).R(:,:,tInd);
%                 end
                % count mean position
                init.poseMean = init.poseMean + rob(ind).t(:,1);
            end
        end
    end

%======================= Sphere formation ================================%

x=zeros(3,3,27);
elseif strcmp(init.pose,'sphere')
    % initialize rob data structure
    s.d = 3; % dimension of the problem
    s.n = 50; % number of robots
    s.bound = 5; % desired boundaries of the environment
    s.gt_bool = true; % is ground truth available?
    init.radius = 3.0;
    init.rComm = 3.0;
    init.a = 4.0*pi*(1.0)^2/s.n;
    init.d = sqrt(init.a);
    init.m_alpha = round(pi/init.d);
    init.d_alpha = pi/init.m_alpha;
    init.d_beta = init.a/init.d_alpha;
    ind = 0;
%     rob = initRobDataStructure(s);
    rob(s.n) = struct();
% robot world frame initialization
for i = 1:s.n
    % ground truth only for certain datasets
    if ( s.gt_bool )
        rob(i).t = zeros(s.d,1);     % world position
        rob(i).R = zeros(s.d,s.d,1); % row vector or rotation matrices
    end
    % measurements
    rob(i).y_t = zeros(s.d,s.n,1);     % measurements
    rob(i).y_R = zeros(s.d,s.d*s.n,1); % measurements
    % centralized estimates
    rob(i).t_hat = zeros(s.d,1);     % translation
    rob(i).R_hat = zeros(s.d,s.d,1); % rotation
end






    for i = 0:(init.m_alpha-1)
        init.alpha = pi*(i+0.5)/init.m_alpha;
        init.m_beta = round(2*pi*sin(init.alpha)/init.d_beta);
        for ii = 0:(init.m_beta-1)
            % current robot index
            ind = ind+1;
            % check final robot count
            if (ind>s.n)
                break;
            end
            init.beta = 2*pi*ii/init.m_beta;
            % generated poses
            rob(ind).t(:,tInd) = init.radius*...
                [sin(init.alpha)*cos(init.beta);
                sin(init.alpha)*sin(init.beta);
                cos(init.alpha)];
            % generated rotations
            rob(ind).R(:,:,tInd) = randRot(s.d);
            x(:,:,ind)=rob(ind).R;
            % count mean position
            init.poseMean = init.poseMean + rob(ind).t(:,tInd); % mean position
        end
    end
    % duplicate extra robots if required
    if (ind<s.n)
        temp = s.n-ind;
        for i = 1:temp
            rob(ind+i).t(:,tInd) = rob(ind).t(:,tInd);
            rob(ind+i).R(:,:,tInd) = rob(ind).R(:,:,tInd);
        end
    end

else
    
    error('Error in initPoseGraph.m: incorrect pose graph selection');
    
end


%% Finalize Initialization of Graph Structures

if ( s.gt_bool)
    % center initial conditions
    init.poseMean = init.poseMean/s.n;
    for i = 1:s.n
        rob(i).t(:,tInd) = rob(i).t(:,tInd) - init.poseMean + s.bound/2.0*ones(3,1);
    end
    % communication graph initialization
    A = zeros(s.n,s.n);
    for i = 1:s.n
        for j = i:s.n
            if i~=j
                testRad = norm( rob(i).t(:,tInd) - rob(j).t(:,tInd) );
                if testRad<=init.rComm
                    A(i,j) = 1; % unweighted graph edges
                end
            end
        end
    end
    s.A = A+A'; % adjacency matrix
    D = diag(sum(s.A,2)); % degree matrix
    g.L = D-s.A; % Laplacian matrix
    [ind_i,ind_j] = find(s.A); % components of directed connections
    s.M = [ind_i,ind_j,find(s.A)]; % matrix of edges
    % [i index, j index, index of L matrix];
    s.m = size(s.M,1);
    eigVal = sort(eig(g.L),'ascend');
    s.fiedler = eigVal(2,1);
    
else
    
    % communication graph extraction from data
    s.M = zeros(s.m,3);
    s.M(:,1:2) = measurements.edges;
    
    % extract graph laplacian from data
    g.L = zeros(s.n,s.n);
    for e = 1:s.m
        i = measurements.edges(e,1);
        j = measurements.edges(e,2);
        g.L(i,j) = -1;
        g.L(i,i) = g.L(i,i) + 1;
        s.M(e,3) = sub2ind([s.n,s.n], i, j);
    end
    s.A = (g.L~=0)-eye(s.n);
    eigVal = sort(eig(g.L),'ascend');
    s.fiedler = eigVal(2,1);
    
end
